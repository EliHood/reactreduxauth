{"version":3,"sources":["firebaseConfig.js","components/SignUp.js","actions/index.js","components/SignIn.js","components/Navbar.js","App.js","serviceWorker.js","reducers/signUpAuth.js","reducers/auth.js","reducers/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","auth","SignUp","GoogleAuthProvider","state","email","password","react_default","a","createElement","className","onSubmit","this","props","signUp","htmlFor","type","id","onChange","onEmailSignUpChangeAction","aria-describedby","value","emailSignUp","placeholder","passwordSignUp","onPasswordSignUpChangeAction","Component","withRouter","connect","user","signUpAuth","dispatch","getState","firebaseAuth","createUserWithEmailAndPassword","then","console","log","catch","error","code","errorMessage","message","alert","event","target","SignIn","for","Navbar","BrowserRouter","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Link","to","Route","path","component","App","components_Navbar","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","createStoreWithMiddleware","applyMiddleware","thunk","createStore","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4944ede3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: \"AIzaSyD_4JF1ZAf29gSq6wc3iKa7xBkg0PFOhkw\",\n    authDomain: \"eli-app3.firebaseapp.com\",\n    databaseURL: \"https://eli-app3.firebaseio.com\",\n    projectId: \"eli-app3\",\n    storageBucket: \"\",\n    messagingSenderId: \"324828100842\"\n};\n\n\nfirebase.initializeApp(config);\n\nexport const database = firebase.database()\nexport const auth = firebase.auth()\nexport const googleProvider = new firebase.auth.GoogleAuthProvider()","import React, {Component} from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {signUp ,onEmailSignUpChangeAction,onPasswordSignUpChangeAction} from '../actions/';\nclass SignUp extends Component {\n    state = {\n        email: \"\",\n        password: \"\"\n    }\n\n    // onChange = (e) =>{\n    //   this.setState({\n    //       [e.target.name] : e.target.value\n    //   })\n    // }\n    // handleSubmit = (e) =>{\n    //     e.preventDefault();\n    //     this.props.signUp(this.state);\n    //     // (register === true) && this.props.history.push('/');\n    //     // console.log(this.state);\n    // }\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h1>Sign Up</h1>\n                        <form onSubmit={this.props.signUp}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                                <input\n                                    type=\"email\"\n                                    className=\"form-control\"\n                                    id=\"email\"\n                                    onChange={this.props.onEmailSignUpChangeAction}\n                                    aria-describedby=\"emailHelp\"\n                                    value={this.props.emailSignUp}\n                                    placeholder=\"Enter email\"/>\n                                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exampleInputPassword1\">Password</label>\n                                <input\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    id=\"password\"\n                                    value={this.props.passwordSignUp}\n                                    onChange={this.props.onPasswordSignUpChangeAction}\n                                    placeholder=\"Password\"/>\n                            </div>\n\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                        </form>\n                    </div>\n\n                </div>\n            </div>\n\n        );\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.auth.user,\n    emailSignUp:state.signUpAuth.emailSignUp,\n    passwordSignUp:state.signUpAuth.passwordSignUp\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    signUp: () => dispatch(signUp()),\n    onEmailSignUpChangeAction: (event) => dispatch(onEmailSignUpChangeAction(event.target.value)),\n    onPasswordSignUpChangeAction: (event) => dispatch(onPasswordSignUpChangeAction(event.target.value)),\n}); \n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignUp));","import { auth as firebaseAuth } from '../firebaseConfig'\n\nexport const EMAIL_SIGN_UP_CHANGE = 'EMAIL_SIGN_UP_CHANGE';\nexport const PASSWORD_SIGN_UP_CHANGE = 'PASSWORD_SIGN_UP_CHANGE';\n\nexport const onEmailSignUpChangeAction = value => ({\n    type: EMAIL_SIGN_UP_CHANGE,\n    email: value\n})\n\nexport const onPasswordSignUpChangeAction = value => ({\n    type: PASSWORD_SIGN_UP_CHANGE,\n    password: value\n})\n\n\n\nexport const onEmptySignUpEmailClick = () => ({\n    type: 'EMPTY_SIGN_UP_EMAIL'\n})\n\nexport const onEmptySignUpPasswordClick = () => ({\n    type: 'EMPTY_SIGN_UP_PASSWORD'\n})\n\nexport const signUp = () => (dispatch, getState) => {\n    const {signUpAuth} = getState();\n    if (signUpAuth.emailSignUp === '') {\n        dispatch(onEmptySignUpEmailClick())\n    }\n    if (signUpAuth.passwordSignUp === '') { \n        dispatch(onEmptySignUpPasswordClick())\n     }\n    else {\n\n        firebaseAuth.createUserWithEmailAndPassword(signUpAuth.emailSignUp, signUpAuth.passwordSignUp)\n            .then(() => console.log('signUpok'))\n                .catch( function (error) {\n                        let errorCode = error.code;\n                        let errorMessage = error.message;\n                        alert(errorMessage)\n                });\n\n    }\n\n}\n\n\n\n","import React, { Component } from 'react';\n\nclass SignIn extends Component{\n    \n    render(){\n        return(\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <h1>Sign In</h1>\n                    <form>\n                        <div className=\"form-group\">\n                            <label for=\"exampleInputEmail1\">Email address</label>\n                            <input\n                                type=\"email\"\n                                className=\"form-control\"\n                                id=\"exampleInputEmail1\"\n                                aria-describedby=\"emailHelp\"\n                                placeholder=\"Enter email\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label for=\"exampleInputPassword1\">Password</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                id=\"exampleInputPassword1\"\n                                placeholder=\"Password\"/>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    </form>\n                </div>\n\n            </div>\n        </div>         \n        )\n    }\n\n}\n\nexport default SignIn;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport SignUp from './SignUp';\nimport SignIn from './SignIn';\nconst Navbar = () => {\n    return(\n    <Router>\n        <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light \">\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample08\" aria-controls=\"navbarsExample08\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n    \n          <div className=\"collapse navbar-collapse justify-content-md-center\" id=\"navbarsExample08\">\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/SignUp\">Sign Up </Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link  className=\"nav-link\" to=\"/SignIn\">Sign In </Link>\n                </li>\n\n            </ul>\n          </div>\n        </nav>\n        <Route path=\"/SignUp\" component={SignUp} />\n        <Route path=\"/SignIn\" component={SignIn} />\n        \n    </div>\n    </Router>\n    );\n\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\n\n\n\n\nclass App extends Component {\n\n  render(){\n      return(\n          <Navbar />\n      )\n  }\n\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { PASSWORD_SIGN_UP_CHANGE, EMAIL_SIGN_UP_CHANGE} from '../actions';\n\nconst initialState = {\n    emailSignUp: '',\n    passwordSignUp: ''\n\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case EMAIL_SIGN_UP_CHANGE:\n            return {\n                ...state,\n                emailSignUp: action.email\n            }\n        case PASSWORD_SIGN_UP_CHANGE:\n            return {\n                ...state,\n                passwordSignUp: action.password\n            }\n        default:\n            return state\n    }\n}","import { auth as firebaseAuth } from '../firebaseConfig';\n\nconst SET_USER = 'auth/SET_USER'\nexport const CLEAR_STATE = 'auth/CLEAR_STATE'\n\nexport const setUserAction = user => ({\n    type: SET_USER,\n    user\n})\n\nexport const initAuthStateListening = () => (dispatch, getState) => {\n    firebaseAuth.onAuthStateChanged(user => {\n\n        dispatch(setUserAction(user))\n     \n    })\n}\n\n\nconst initialState = {\n    user: null\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER:\n            return {\n                ...initialState,\n                user: action.user\n            }\n        default:\n            return state\n    }\n}","import authReducer from './signUpAuth';\nimport { combineReducers } from 'redux';\nimport auth, { initAuthStateListening } from './auth'\n\n\nconst rootReducer = combineReducers({\n    signUpAuth: authReducer,\n    auth\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk'\n\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(rootReducer)}>\n      <App />\n    </Provider>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["firebaseConfig.js","components/SignUp.js","actions/index.js","components/SignIn.js","components/Dashboard.js","components/Navbar.js","App.js","serviceWorker.js","reducers/auths.js","reducers/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","settings","timestampsInSnapshots","database","ref","auth","fire","GoogleAuthProvider","SignUp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","formData","state","setState","objectSpread","defineProperty","target","name","value","email","password","errors","bind","assertThisInitialized","handleSubmit","preventDefault","_this$state","creds","signUp","_this$props","authError","userId","react_default","a","createElement","Redirect","to","className","onSubmit","htmlFor","type","id","onChange","aria-describedby","placeholder","Component","withRouter","connect","user","auths","dispatch","firebaseAuth","createUserWithEmailAndPassword","trim","then","resp","collection","doc","uid","set","response","history","push","catch","err","SignIn","e","console","log","signIn","signInWithEmailAndPassword","Dashboard","createBrowserHistory","forceRefresh","isAuthenticated","signOut","BrowserRouter","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Link","onClick","Route","path","component","App","CurrentUser","components_Navbar","onAuthStateChanged","payload","Boolean","window","location","hostname","match","initialState","emailSignUp","passwordSignUp","rootReducer","combineReducers","arguments","length","undefined","action","message","firebaseReducer","firestoreReducer","createStoreWithMiddleware","applyMiddleware","thunk","createStore","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf88ee2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\n\n const config = {\n    apiKey: \"AIzaSyD_4JF1ZAf29gSq6wc3iKa7xBkg0PFOhkw\",\n    authDomain: \"eli-app3.firebaseapp.com\",\n    databaseURL: \"https://eli-app3.firebaseio.com\",\n    projectId: \"eli-app3\",\n    storageBucket: \"\",\n    messagingSenderId: \"324828100842\"\n};\n\n\nfirebase.initializeApp(config);\nfirebase.firestore().settings({ timestampsInSnapshots: true });\n\nexport const ref = firebase.database().ref()\nexport const auth = firebase.auth()\nexport const fire = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider()\n\nexport default firebase;","import React, {Component} from 'react';\nimport {withRouter, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {signUp, CurrentUser, onEmailSignUpChangeAction, onPasswordSignUpChangeAction} from '../actions/';\nimport '../App.css';\nimport { history } from '../components/Navbar';\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            formData: { // set up default form values\n                email: \"\",\n                password: \"\"\n            },\n            errors: {}\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // UNSAFE_componentWillMount(){\n    //     console.log(this.props.userId);\n    // }\n\n\n    handleChange = (event) => {\n        const {formData} = this.state;\n\n        this.setState({\n            formData: {\n                ...formData, // leave other values unchanged\n                [event.target.name]: event.target.value, // update the changed value\n            }\n        });\n    }\n\n    // ...\n    handleSubmit(event) {\n        event.preventDefault();\n        const {formData, errors}=this.state;\n        let  {email, password} = formData;\n        let creds = {\n            email,\n            password\n        }\n        // console.log(creds);\n       this.props.signUp(creds);\n   \n    }\n\n    render() {\n        const {authError, userId} = this.props\n        if (userId) return <Redirect to='/dashboard' />\n        return (\n            \n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h1>Sign Up</h1>\n                        <div className=\"center red-text\">\n                            {authError\n                                ? <p>\n                                        {authError}\n                                    </p>\n                                : null}\n                        </div>\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                                <input\n                                    name=\"email\"\n                                    type=\"email\"\n                                    className=\"form-control\"\n                                    id=\"email\"\n                                    value={this.state.formData.email}\n                                    onChange={this.handleChange}\n                                    aria-describedby=\"emailHelp\"\n                                    placeholder=\"Enter email\"/>\n                                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exampleInputPassword1\">Password</label>\n                                <div></div>\n                                <input\n                                    name=\"password\"\n                                    type=\"password\"\n                                    value={this.state.formData.password}\n                                    onChange={this.handleChange}\n                                    className=\"form-control\"\n                                    id=\"password\"\n                                    placeholder=\"Password\"/>\n\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                        </form>\n                    </div>\n\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.firebase.auth,\n  authError: state.auths.authError,\n  userId: state.auths.userId\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    signUp: (user) => dispatch(signUp(user))\n\n});\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignUp));","import { auth as firebaseAuth } from '../firebaseConfig'\nimport {fire} from '../firebaseConfig'\nimport { push } from 'react-router-redux';\nimport { history } from '../components/Navbar';\nimport { getFirebase } from 'react-redux-firebase';\n\nexport const SET_USER = \"SET_USER\";\n\nexport const signUp = (user) => { return (dispatch) => {\n    firebaseAuth.createUserWithEmailAndPassword(user.email.trim(), user.password)\n     .then(resp => {\n            return fire.collection('users').doc(resp.user.uid).set({\n              email: user.email,\n              password: user.password,\n              uid: resp.user.uid\n             \n            });\n          })\n        .then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS' });\n          })\n        .then((response) => {\n            history.push('/dashboard');\n        }).catch((err) => {\n            dispatch({ type: 'SIGNUP_ERROR', err});\n        });\n\n \n    }\n    \n}\n\nexport const signIn = (user) => { return (dispatch) => {\n\n    firebaseAuth.signInWithEmailAndPassword(user.email, user.password)\n        .then(()=> {\n            dispatch({type: 'SIGNIN_SUCCESS'})\n        }).then((response) => {\n            history.push('/dashboard');\n        }).catch( (err) => {\n            dispatch({ type: 'SIGNIN_ERROR', err});\n        });\n    }\n   \n}\n\nexport const signOut = () => { return (dispatch) => {\n\n        firebaseAuth.signOut().then(() => {\n            dispatch({ type: 'LOGOUT_SUCCESS'})\n        })\n    }\n}\n\n\nexport const CurrentUser = () => dispatch => {\n    firebaseAuth.onAuthStateChanged((user) => {\n        if (user) {\n            dispatch({\n                type: SET_USER, \n                payload: user\n            }); \n        }\n      });\n    \n}\n\n\n","import React, { Component } from 'react';\nimport {withRouter, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {signIn} from  '../actions/';\n\nclass SignIn extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            formData:{\n                email: '',\n                password: '',\n            },\n            errors:{}\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    handleChange = e => {\n        console.log(e.target.name);\n        const { formData } = this.state\n        this.setState({\n          formData: {\n            ...formData,\n            [e.target.name]: e.target.value\n          }\n        });\n      };\n\n    handleSubmit = (e) => {\n        e.preventDefault();  \n        const {formData, errors} = this.state;\n        const {email, password} = formData;\n\n        const creds = {\n            email,\n            password\n        }\n        \n        \n        const signin = this.props.signIn(creds);\n\n        if(signin){\n            console.log(creds);\n        }\n\n    }\n\n\n    render(){\n        const {authError,userId} = this.props\n        if (userId) return <Redirect to='/dashboard' />\n        return(\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <h1>Sign In</h1>\n\n                    <div className=\"center red-text\">\n                            {authError\n                                ? <p>\n                                        {authError}\n                                    </p>\n                                : null}\n                        </div>\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                            <input\n                                name=\"email\" \n                                type=\"email\"\n                                className=\"form-control\"\n                                id=\"exampleInputEmail1\"\n                                onChange={this.handleChange}\n                                aria-describedby=\"emailHelp\"\n                                placeholder=\"Enter email\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"exampleInputPassword1\">Password</label>\n                            <input\n                                name=\"password\"\n                                onChange={this.handleChange}\n                                type=\"password\"\n                                className=\"form-control\"\n                                id=\"exampleInputPassword1\"\n                                placeholder=\"Password\"/>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    </form>\n                </div>\n\n            </div>\n        </div>         \n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.firebase.auth,\n    authError: state.auths.authError,\n    userId: state.auths.userId\n  })\n  \n  const mapDispatchToProps = (dispatch) => ({\n      signIn: (user) => dispatch(signIn(user))\n  \n  });\n  \n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignIn));","import React, {Component} from 'react';\n\nclass Dashboard extends Component{\n\n    render(){\n        return(\n            <div className=\"container\"> \n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h1>Welcome</h1>\n                    </div>\n                </div>\n            </div>\n          \n\n        );\n    }\n\n\n}\n\nexport default Dashboard","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport createBrowserHistory from 'history/createBrowserHistory';\nimport SignUp from './SignUp';\nimport SignIn from './SignIn';\nimport { connect } from 'react-redux'\nimport {signOut} from '../actions/';\nimport Dashboard from './Dashboard';\n\nexport const history = createBrowserHistory({forceRefresh:true});\n\nconst Navbar = (props) => {\n    return(\n        \n    <Router history={history}>\n        <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light \">\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample08\" aria-controls=\"navbarsExample08\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n    \n          <div className=\"collapse navbar-collapse justify-content-md-center\" id=\"navbarsExample08\">\n            <ul className=\"navbar-nav\">\n\n                <li className=\"nav-item\">\n                    <Link  className=\"nav-link\" to=\"/\">Home </Link>\n                </li>  \n                <li className=\"nav-item\">\n                    <Link  className=\"nav-link\" to=\"/dashboard\">Dashboard </Link>\n                </li>\n\n                {!props.isAuthenticated && (\n                    <li className=\"nav-item\">\n                        <Link  className=\"nav-link\" to=\"/SignIn\">Sign-In</Link>\n                    </li>\n                )}\n                {!props.isAuthenticated && (        \n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/SignUp\">Sign Up </Link>\n                    </li>\n                )}\n          \n                <button className=\"btn btn-outline-primary btn-sm\" onClick={() => props.signOut()}>Log out</button>\n\n            </ul>\n          </div>\n        </nav>\n        <Route path=\"/SignUp\" component={SignUp} />\n        <Route path=\"/SignIn\" component={SignIn} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n       \n    </div>\n    </Router>\n    );\n\n}\n\nconst mapStateToProps = (state) => ({\n\n    isAuthenticated: state.auths.isAuthenticated\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\n    signOut: () => dispatch(signOut())\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar)\n\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { CurrentUser } from \"./actions\";\nimport { connect } from \"react-redux\";\n\n\nclass App extends Component {\n    componentWillMount() {\n        this.props.CurrentUser();\n    }\n  render(){\n      return(\n          <Navbar />\n      )\n  }\n\n}\n\n\nexport default connect(null, { CurrentUser })(App);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { SET_USER} from '../actions/';\nimport { CurrentUser } from \"../actions\";\n\nconst initialState = {\n    emailSignUp: '',\n    passwordSignUp: '',\n    authError: null,\n    isAuthenticated: false,\n    userId: null\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER:\n            return ({\n                userId: action.payload.uid || null,\n                isAuthenticated: true\n            })\n            \n        case 'LOGOUT_SUCCESS':\n            console.log('signout success')\n            return ({\n                ...state,\n                userId: null,\n                isAuthenticated: false\n            })    \n\n        case 'SIGNUP_SUCCESS':      \n            return ({\n                ...state,\n                authError: null\n            })\n\n        case 'SIGNUP_ERROR':\n            console.log('signup error')\n            return ({\n                ...state,\n                authError: action.err.message\n            })\n\n        case 'SIGNIN_SUCCESS':\n            console.log('signin success')\n            return ({\n                ...state,\n                authError: null\n            })\n\n        case 'SIGNIN_ERROR':\n            console.log('signin error')\n            return ({\n                ...state,\n                authError: action.err.message\n            })\n        default:\n            return state\n    }\n}","import authReducer from './auths';\nimport { combineReducers } from 'redux';\n\nimport {firebaseReducer, firestoreReducer } from 'react-redux-firebase';\n\n\nconst rootReducer = combineReducers({\n    auths: authReducer,\n    firebase: firebaseReducer,\n    firestore: firestoreReducer\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk'\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(rootReducer)}>\n     <Router >\n      <App />\n      </Router>\n    </Provider>\n    \n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
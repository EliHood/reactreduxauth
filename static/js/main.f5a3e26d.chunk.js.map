{"version":3,"sources":["firebaseConfig.js","components/SignUp.js","actions/index.js","components/SignIn.js","components/Navbar.js","App.js","serviceWorker.js","reducers/signUpAuth.js","reducers/auth.js","reducers/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","auth","SignUp","GoogleAuthProvider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","formData","state","setState","objectSpread","defineProperty","target","name","value","email","password","errors","bind","assertThisInitialized","handleSubmit","preventDefault","_this$state","creds","authError","signUp","console","log","react_default","a","createElement","className","onSubmit","htmlFor","type","id","onChange","aria-describedby","placeholder","Component","withRouter","connect","user","signUpAuth","dispatch","firebaseAuth","createUserWithEmailAndPassword","then","response","history","push","catch","err","SignIn","for","createBrowserHistory","forceRefresh","Navbar","BrowserRouter","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Link","to","Route","path","component","App","components_Navbar","Boolean","window","location","hostname","match","initialState","emailSignUp","passwordSignUp","rootReducer","combineReducers","arguments","length","undefined","action","message","createStoreWithMiddleware","applyMiddleware","thunk","createStore","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5a3e26d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: \"AIzaSyD_4JF1ZAf29gSq6wc3iKa7xBkg0PFOhkw\",\n    authDomain: \"eli-app3.firebaseapp.com\",\n    databaseURL: \"https://eli-app3.firebaseio.com\",\n    projectId: \"eli-app3\",\n    storageBucket: \"\",\n    messagingSenderId: \"324828100842\"\n};\n\n\nfirebase.initializeApp(config);\n\nexport const database = firebase.database()\nexport const auth = firebase.auth()\nexport const googleProvider = new firebase.auth.GoogleAuthProvider()","import React, {Component} from 'react';\nimport {withRouter, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {signUp, onEmailSignUpChangeAction, onPasswordSignUpChangeAction} from '../actions/';\nimport '../App.css';\nimport { history } from '../components/Navbar';\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            formData: { // set up default form values\n                email: \"\",\n                password: \"\"\n            },\n            errors: {}\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange = (event) => {\n        const {formData} = this.state;\n\n        this.setState({\n            formData: {\n                ...formData, // leave other values unchanged\n                [event.target.name]: event.target.value, // update the changed value\n            }\n        });\n    }\n\n    // ...\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const {formData, errors} = this.state;\n        const {email, password} = formData;\n\n        const myError = this.props.authError;\n        const creds = {\n            email,\n            password\n        }\n        const register =  this.props.signUp(creds);\n        if (register) {\n     \n            console.log(creds);\n\n        }\n    }\n\n    render() {\n        const {authError} = this.props\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h1>Sign Up</h1>\n                        <div className=\"center red-text\">\n                            {authError\n                                ? <p>\n                                        {authError}\n                                    </p>\n                                : null}\n                        </div>\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                                <input\n                                    name=\"email\"\n                                    type=\"email\"\n                                    className=\"form-control\"\n                                    id=\"email\"\n                                    value={this.state.formData.email}\n                                    onChange={this.handleChange}\n                                    aria-describedby=\"emailHelp\"\n                                    placeholder=\"Enter email\"/>\n                                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exampleInputPassword1\">Password</label>\n                                <div></div>\n                                <input\n                                    name=\"password\"\n                                    type=\"password\"\n                                    value={this.state.formData.password}\n                                    onChange={this.handleChange}\n                                    className=\"form-control\"\n                                    id=\"password\"\n                                    placeholder=\"Password\"/>\n\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                        </form>\n                    </div>\n\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user, \n  authError: state.signUpAuth.authError\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    signUp: (user) => dispatch(signUp(user))\n\n});\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SignUp));","import { auth as firebaseAuth } from '../firebaseConfig'\nimport { push } from 'react-router-redux';\nimport { history } from '../components/Navbar';\n\nexport const signUp = (user) => { return (dispatch) => {\n    firebaseAuth.createUserWithEmailAndPassword(user.email, user.password)\n        .then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS' })\n        }).then((response) => {\n            history.push('/');\n        }).catch((err) => {\n            dispatch({ type: 'SIGNUP_ERROR', err});\n        });\n\n \n    }\n    \n}\n\nexport const signIn = (user) => { return (dispatch) => {\n\n        firebaseAuth.signInWithEmailAndPassword(user._email, user._password)\n            .then(() =>  dispatch({ type: 'SIGNUP_SUCCESS' }))\n                .catch( function (error) {\n                        let errorCode = error.code;\n                        let errorMessage = error.message;\n                        alert(errorMessage)\n                });\n    \n    \n    \n        }\n        \n}\n\n    ","import React, { Component } from 'react';\n\nclass SignIn extends Component{\n    \n    render(){\n        return(\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <h1>Sign In</h1>\n                    <form>\n                        <div className=\"form-group\">\n                            <label for=\"exampleInputEmail1\">Email address</label>\n                            <input\n                                type=\"email\"\n                                className=\"form-control\"\n                                id=\"exampleInputEmail1\"\n                                aria-describedby=\"emailHelp\"\n                                placeholder=\"Enter email\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label for=\"exampleInputPassword1\">Password</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                id=\"exampleInputPassword1\"\n                                placeholder=\"Password\"/>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    </form>\n                </div>\n\n            </div>\n        </div>         \n        )\n    }\n\n}\n\nexport default SignIn;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport createBrowserHistory from 'history/createBrowserHistory';\nimport SignUp from './SignUp';\nimport SignIn from './SignIn';\n\nexport const history = createBrowserHistory({forceRefresh:true});\n\nconst Navbar = () => {\n    return(\n        \n    <Router history={history}>\n        <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light \">\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample08\" aria-controls=\"navbarsExample08\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n    \n          <div className=\"collapse navbar-collapse justify-content-md-center\" id=\"navbarsExample08\">\n            <ul className=\"navbar-nav\">\n\n                <li className=\"nav-item\">\n                    <Link  className=\"nav-link\" to=\"/\">Home </Link>\n                </li>  \n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/SignUp\">Sign Up </Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link  className=\"nav-link\" to=\"/SignIn\">Sign In </Link>\n                </li>\n              \n\n            </ul>\n          </div>\n        </nav>\n        <Route path=\"/SignUp\" component={SignUp} />\n        <Route path=\"/SignIn\" component={SignIn} />\n        <Route path=\"/reactreduxauth\" />\n        \n    </div>\n    </Router>\n    );\n\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\n\n\n\n\nclass App extends Component {\n\n  render(){\n      return(\n          <Navbar />\n      )\n  }\n\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst initialState = {\n    emailSignUp: '',\n    passwordSignUp: '',\n    authError: null\n\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'SIGNUP_SUCCESS':      \n            return ({\n                ...state,\n                authError: null\n            })\n\n        case 'SIGNUP_ERROR':\n            console.log('signup error')\n            return ({\n                ...state,\n                authError: action.err.message\n            })\n        default:\n            return state\n    }\n}","import { auth as firebaseAuth } from '../firebaseConfig';\n\nconst SET_USER = 'auth/SET_USER'\nexport const CLEAR_STATE = 'auth/CLEAR_STATE'\n\nexport const setUserAction = user => ({\n    type: SET_USER,\n    user\n})\n\nexport const initAuthStateListening = () => (dispatch, getState) => {\n    firebaseAuth.onAuthStateChanged(user => {\n\n        dispatch(setUserAction(user))\n     \n    })\n}\n\n\nconst initialState = {\n    user: null\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER:\n            return {\n                ...initialState,\n                user: action.user\n            }\n        default:\n            return state\n    }\n}","import authReducer from './signUpAuth';\nimport { combineReducers } from 'redux';\nimport auth, { initAuthStateListening } from './auth'\n\n\nconst rootReducer = combineReducers({\n    signUpAuth: authReducer,\n    auth\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk'\nimport { BrowserRouter as Router } from 'react-router-dom';\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(rootReducer)}>\n     <Router >\n      <App />\n      </Router>\n    </Provider>\n    \n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}